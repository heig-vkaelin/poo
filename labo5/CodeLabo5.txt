package matrix;

/**
 * Classe principale du programme permettant de tester l'implémentation
 * des Matrices et des diverses opérations arithmétiques.
 *
 * @author Alexandre Jaquier
 * @author Valentin Kaelin
 */
public class Main {
    /**
     * Teste qu'une exception est levée en cas d'opération entre deux matrices avec
     * des modules différents
     */
    private static void testDifferentModulus() {
        System.out.println("TEST : Opération avec modulos différents");
        int modulus1 = 4;
        int[][] data1 = new int[][]{
                {1, 1, 1, 1},
                {1, 1, 1, 1}
        };
        int modulus2 = 6;
        int[][] data2 = new int[][]{
                {1, 1, 1, 1},
                {1, 1, 1, 1}
        };
        Matrix m1 = new Matrix(data1, modulus1);
        Matrix m2 = new Matrix(data2, modulus2);
        try {
            Matrix.add(m1, m2);
            
        } catch (RuntimeException e) {
            System.out.println("Erreur levée lorsque les modulos ne correspondent " +
                    "pas: ");
            System.out.println(e.getMessage());
            System.out.println("TEST PASSÉ\n");
        }
    }
    
    /**
     * Teste que la création et les opérations avec une matrice vide se passent
     * sans soucis
     */
    private static void testEmptyMatrix() {
        System.out.println("TEST : Matrice vide");
        int modulus = 4;
        int[][] data3 = new int[][]{
                {2, 2, 2}
        };
        int[][] data4 = new int[][]{};
        
        Matrix m3 = new Matrix(data3, modulus);
        System.out.println("Matrice vide multiplie une autre matrice :");
        try {
            Matrix m4 = new Matrix(data4, modulus);
            System.out.print(Matrix.multiply(m3, m4));
            System.out.println("TEST PASSÉ\n");
        } catch (RuntimeException e) {
            System.out.println("ERREUR: une addition avec une matrice vide ne " +
                    "devrait pas lever d'exception\n");
        }
    }
    
	
	
	
	
	
	
	
	
	
	
    /**
     * Teste qu'une exception est levée à la création d'une matrice avec un modulo
     * négatif
     */
    private static void testNegativeModulus() {
        System.out.println("TEST : Modulo négatif");
        int modulus = -4;
        int[][] data1 = new int[][]{
                {1, 1, 1, 1},
                {1, 1, 1, 1}
        };
        try {
            new Matrix(data1, modulus);
        } catch (RuntimeException e) {
            System.out.println("Erreur levée lors d'une création d'une matrice " +
                    "avec un modulo négatif: ");
            System.out.println(e.getMessage());
            System.out.println("TEST PASSÉ\n");
        }
    }
    
    /**
     * Teste qu'une exception est levée à la création d'une matrice avec un nombre
     * de lignes négatif
     */
    private static void testNegativeRow() {
        System.out.println("TEST : Ligne de taille négative");
        int modulus = 4;
        int col = -1;
        int row = 1;
        try {
            new Matrix(col, row, modulus);
        } catch (RuntimeException e) {
            System.out.println("Erreur levée lors de la création d'une matrice " +
                    "d'une taille négative:");
            System.out.println(e.getMessage());
            System.out.println("TEST PASSÉ\n");
        }
    }
    
    /**
     * Teste qu'une exception est levée à la création d'une matrice avec des lignes
     * de taille différentes
     */
    private static void testRowsNotSameLength() {
        System.out.println("TEST : Lignes de tailles différentes");
        int modulus = 4;
        int[][] data1 = new int[][]{
                {1, 1, 1, 1},
                {1, 1, 1},
                {1, 1},
                {1}
        };
        try {
            new Matrix(data1, modulus);
        } catch (RuntimeException e) {
            System.out.println("Erreur levée lors de la création d'une matrice " +
                    "avec des lignes de tailles différentes: ");
            System.out.println(e.getMessage());
            System.out.println("TEST PASSÉ\n");
        }
    }
    
	
	
	
	
	
	
    /**
     * Teste qu'une exception est levée à la création d'une matrice des valeurs
     * en dehors de l'intervalle autorisé.
     */
    private static void testIllegalValues() {
        System.out.println("TEST : Valeurs illégales");
        int modulus = 2;
        int[][] data1 = new int[][]{
                {1, 1, 1, 1},
                {2, 2, 2, 2}
        };
        try {
            new Matrix(data1, modulus);
        } catch (RuntimeException e) {
            System.out.println("Erreur levée lors de la création d'une matrice " +
                    "avec des valeurs plus grandes que le modulo - 1 : ");
            System.out.println(e.getMessage());
            System.out.println("TEST PASSÉ\n");
        }
    }
    
    /**
     * Lance tous les tests de cas limites
     */
    public static void testEverything() {
        testDifferentModulus();
        testEmptyMatrix();
        testNegativeModulus();
        testNegativeRow();
        testRowsNotSameLength();
        testIllegalValues();
    }
    
    /**
     * Méthode appelée au lancement du programme, teste les différentes opérations
     * sur des matrices de valeurs aléatoires créées en fonction des arguments
     * entrés par l'utilisateur.
     *
     * @param args 5 arguments du programme:
     *             - modulo
     *             - nbLignesMatrice1
     *             - nbColonnesMatrice1
     *             - nbLignesMatrice2
     *             - nbColonnesMatrice2
     * @throws Exception si l'entrée utilisateur est invalide
     */
    public static void main(String[] args) throws Exception {
        // Enlever le commentaire si l'on souhaite tester les différents cas limites
        // testEverything();
        
        if (args.length != 5) {
            String errorMsg = "Le programme demande 5 arguments:\n" +
                    "1. modulo\n" +
                    "2. nbLignesMatrice1\n" +
                    "3. nbColonnesMatrice1\n" +
                    "4. nbLignesMatrice2\n" +
                    "5. nbColonnesMatrice2";
            throw new Exception(errorMsg);
        }
        
        int modulus;
        int rows1;
        int cols1;
        int rows2;
        int cols2;
        
		
		
		
        try {
            modulus = Integer.parseInt(args[0]);
            rows1 = Integer.parseInt(args[1]);
            cols1 = Integer.parseInt(args[2]);
            rows2 = Integer.parseInt(args[3]);
            cols2 = Integer.parseInt(args[4]);
        } catch (NumberFormatException e) {
            // On relance une exception afin de stopper le programme tout en affichant
            // un message d'erreur explicite à l'utilisateur.
            throw new Exception("Les arguments entrés ne sont pas valides.", e);
        }
        
        System.out.println("The modulus is " + modulus);
        
        Matrix m1 = new Matrix(rows1, cols1, modulus);
        System.out.println("one");
        System.out.println(m1);
        
        Matrix m2 = new Matrix(rows2, cols2, modulus);
        System.out.println("two");
        System.out.println(m2);
        
        System.out.println("one + two");
        System.out.println(Matrix.add(m1, m2));
        
        System.out.println("one - two");
        System.out.println(Matrix.subtract(m1, m2));
        
        System.out.println("one x two");
        System.out.println(Matrix.multiply(m1, m2));
    }
}


package matrix;

import java.util.Random;

/**
 * Classe permettant de modéliser une Matrice. Il est également possible de réaliser
 * diverses opérations arithmétiques sur deux Matrices via des méthodes static.
 *
 * @author Alexandre Jaquier
 * @author Valentin Kaelin
 */
public class Matrix {
    private int rows;
    private int columns;
    private final int modulus;
    private int[][] data;
    
    /**
     * Constructeur privé utilisé pour factoriser la vérification du modulo
     *
     * @param mod modulo de la matrice
     * @throws RuntimeException si le modulo n'est pas strictement positif
     */
    private Matrix(int mod) throws RuntimeException {
        if (mod <= 0) {
            throw new RuntimeException("Les modulos négatifs ou égaux à 0 sont " +
                    "interdits.");
        }
        modulus = mod;
    }
    
    /**
     * Constructeur de Matrice remplie de valeurs aléatoires selon le modulo choisi.
     *
     * @param rows    nombre de lignes de la Matrice
     * @param columns nombre de colonnes de la Matrice
     * @param mod     modulo de la matrice
     * @throws RuntimeException si le modulo n'est pas strictement positif
     * @throws RuntimeException si la ou les dimension(s) de la matrice est/sont
     *                          négative(s)
     */
    Matrix(int rows, int columns, int mod) throws RuntimeException {
        this(mod);
        
        if (rows < 0 || columns < 0) {
            throw new RuntimeException("Le nombre de lignes et de colonnes de la " +
                    "matrice doivent être > 0.");
        }
        
        this.rows = rows;
        this.columns = columns;
        data = new int[rows][columns];
        Random random = new Random();
        
        for (int row = 0; row < data.length; ++row) {
            for (int col = 0; col < data[0].length; ++col) {
                data[row][col] = random.nextInt(modulus);
            }
        }
    }
    
    /**
     * Constructeur de Matrice via des valeurs déjà définies
     *
     * @param values tableau à deux dimensions contenant les futures valeurs
     *               de la Matrice
     * @param mod    modulo de la Matrice
     * @throws RuntimeException si le modulo n'est pas strictement positif
     * @throws RuntimeException si les lignes ne font pas toutes la même taille
     * @throws RuntimeException si une valeur n'est pas dans
     *                          l'intervalle [0, modulo - 1]
     */
    Matrix(int[][] values, int mod) throws RuntimeException {
        this(mod);
        
        // Matrice vide
        if (values.length == 0) {
            rows = 0;
            columns = 0;
            data = new int[0][0];
            return;
        }
        
        rows = values.length;
        columns = values[0].length;
        data = new int[rows][columns];
        
		
		
		
		
		
		
		
		
		
		
		
		
		
        // Copie du tableau de valeurs
        for (int row = 0; row < rows; ++row) {
            // Vérification que toutes les lignes font la même taille
            if (values[row].length != columns) {
                throw new RuntimeException("Toutes les lignes de la matrice" +
                        "doivent avoir la même taille.");
            }
            for (int col = 0; col < columns; ++col) {
                // Vérification que toutes les valeurs soient bien dans le bon intervalle
                int val = values[row][col];
                if (val < 0 || val > (modulus - 1)) {
                    throw new RuntimeException("Les valeurs de la matrice doivent " +
                            "être entre 0 et modulo - 1.");
                } else {
                    data[row][col] = val;
                }
            }
        }
    }
    
    /**
     * Applique l'opération passée en paramètre entre les deux Matrices. L'opération
     * sera faite composante par composante et un modulo sera appliqué au résultat
     * selon les modulos des Matrices.
     *
     * @param m1 première Matrice
     * @param m2 deuxième Matrice
     * @param op opération à effectuer entre les deux Matrices
     * @return une nouvelle instance de Matrice après l'opération effectuée
     * @throws RuntimeException si les modulos ne sont pas compatibles
     */
    private static Matrix applyOperator(Matrix m1, Matrix m2, Operator op)
            throws RuntimeException {
        if (m1.modulus != m2.modulus) {
            throw new RuntimeException("Les modulos des deux matrices ne " +
                    "correspondent pas.");
        }
        
        int maxRows = Math.max(m1.rows, m2.rows);
        int maxColumns = Math.max(m1.columns, m2.columns);
        int[][] result = new int[maxRows][maxColumns];
        
        for (int row = 0; row < maxRows; ++row) {
            for (int col = 0; col < maxColumns; ++col) {
                int op1 = row >= m1.rows || col >= m1.columns ? 0 : m1.data[row][col];
                int op2 = row >= m2.rows || col >= m2.columns ? 0 : m2.data[row][col];
                result[row][col] = Math.floorMod(op.apply(op1, op2), m1.modulus);
            }
        }
        
        return new Matrix(result, m1.modulus);
    }
    
    /**
     * Addition entre deux Matrices. L'addition sera faite composante par composante
     * et un modulo sera appliqué au résultat selon les modulos des Matrices.
     *
     * @param m1 première Matrice
     * @param m2 deuxième Matrice
     * @return une nouvelle instance de Matrice après l'addition effectuée
     * @throws RuntimeException si les modulos ne sont pas compatibles
     */
    public static Matrix add(Matrix m1, Matrix m2) throws RuntimeException {
        return applyOperator(m1, m2, new Add());
    }
    
	
	
	
    /**
     * Soustraction entre deux Matrices. La soustraction sera faite composante par
     * composante et un modulo sera appliqué au résultat selon les modulos des
     * Matrices.
     *
     * @param m1 première Matrice
     * @param m2 deuxième Matrice
     * @return une nouvelle instance de Matrice après la soustraction effectuée
     * @throws RuntimeException si les modulos ne sont pas compatibles
     */
    public static Matrix subtract(Matrix m1, Matrix m2) throws RuntimeException {
        return applyOperator(m1, m2, new Subtract());
    }
    
    /**
     * Multiplication entre deux Matrices. La multiplication sera faite composante
     * par composante et un modulo sera appliqué au résultat selon les modulos des
     * Matrices.
     *
     * @param m1 première Matrice
     * @param m2 deuxième Matrice
     * @return une nouvelle instance de Matrice après la multiplication effectuée
     * @throws RuntimeException si les modulos ne sont pas compatibles
     */
    public static Matrix multiply(Matrix m1, Matrix m2) throws RuntimeException {
        return applyOperator(m1, m2, new Multiply());
    }
    
    /**
     * Représentation de la Matrice
     *
     * @return une String représentant l'instance de la Matrice
     */
    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        
        for (int row = 0; row < rows; ++row) {
            for (int col = 0; col < columns; ++col) {
                sb.append(data[row][col]);
                sb.append(" ");
            }
            sb.append("\n");
        }
        
        return sb.toString();
    }
}

package matrix;

/**
 * Classe abstraite permettant de modéliser une opération arithmétique
 * entre deux entiers.
 *
 * @author Alexandre Jaquier
 * @author Valentin Kaelin
 */
public abstract class Operator {
    /**
     * Méthode abstraite à redéfinir pour spécifier le résultat de l'opération
     * arithmétique entre les deux opérandes.
     *
     * @param a premier opérande
     * @param b second opérande
     * @return le résultat de l'opération
     */
    public abstract int apply(int a, int b);
}


package matrix;

/**
 * Classe représentant l'opération arithmétique d'addition
 *
 * @author Alexandre Jaquier
 * @author Valentin Kaelin
 */
public class Add extends Operator {
    /**
     * Additionne les deux opérandes
     *
     * @param a premier opérande
     * @param b second opérande
     * @return le résultat de l'addition
     */
    @Override
    public int apply(int a, int b) {
        return a + b;
    }
}


package matrix;

/**
 * Classe représentant l'opération arithmétique de soustraction
 *
 * @author Alexandre Jaquier
 * @author Valentin Kaelin
 */
public class Subtract extends Operator {
    /**
     * Soustrais la deuxième opérande à la première
     *
     * @param a premier opérande
     * @param b second opérande
     * @return le résultat de la soustraction
     */
    @Override
    public int apply(int a, int b) {
        return a - b;
    }
}


package matrix;

/**
 * Classe représentant l'opération arithmétique de multiplication
 *
 * @author Alexandre Jaquier
 * @author Valentin Kaelin
 */
public class Multiply extends Operator {
    /**
     * Multiplie les deux opérandes
     *
     * @param a premier opérande
     * @param b second opérande
     * @return le résultat de la multiplication
     */
    @Override
    public int apply(int a, int b) {
        return a * b;
    }
}

